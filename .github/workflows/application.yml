name: Application

on:
    push: ~
    release:
        types: [created]
    schedule:
        -
            cron: "0 1 * * 6" # Run at 1am every Saturday

permissions:
    contents: write
    pull-requests: write

jobs:
    static-checks:
        runs-on: ubuntu-latest

        name: "Static checks (PHP ${{ matrix.php }})"

        strategy:
            fail-fast: false
            matrix:
                php: [ 8.2 ]

        steps:
            -
                uses: actions/checkout@v2

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    ini-values: date.timezone=Europe/Warsaw
                    extensions: intl, gd, mysql, pdo_mysql, :xdebug
                    tools: symfony
                    coverage: none

            -
                name: Configure project
                run: ./configure --env=dev --with-tests --clean-before-tasks

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-

            -
                name: Install PHP dependencies
                run: composer install --no-interaction
                id: end-of-setup

            -
                name: Validate composer.json
                run: composer validate --strict
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Check for security vulnerabilities
                run: symfony security:check
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Validate coding standard
                run: vendor/bin/ecs check
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Validate Twig templates
                run: bin/console lint:twig templates
                if: always() && steps.end-of-setup.outcome == 'success'

            -
                name: Validate Yaml filesgit
                run: bin/console lint:yaml config --parse-tags
                if: always() && steps.end-of-setup.outcome == 'success'

            #-
            #    name: Run Psalm
            #    run: vendor/bin/psalm --show-info=false
            #    if: always() && steps.end-of-setup.outcome == 'success'

            -   name: Run Twigcs
                run: vendor/bin/twigcs
                if: always() && steps.end-of-setup.outcome == 'success'

            -   name: Run PHPStan
                run: vendor/bin/phpstan analyse src
                if: always() && steps.end-of-setup.outcome == 'success'

    test-application:
        runs-on: ubuntu-22.04

        needs: [static-checks]

        name: "Test application (PHP ${{ matrix.php }}, Behat driver ${{ matrix.behat_driver }}), PostgreSQL ${{ matrix.mysql }})"

        timeout-minutes: 25

        strategy:
            fail-fast: false
            matrix:
                php: ["8.2"]
                node: ["14.x"]
                postgres: ["15.3"]
                behat_driver: ["panther", "chrome"]

        env:
            APP_ENV: test
            DATABASE_URL: "pgsql://postgres:postgres@127.0.0.1/monofony_demo?serverVersion=${{ matrix.postgres }}"

        steps:
            -
                uses: actions/checkout@v2

            -
                name: Shutdown default MySQL
                run: sudo service mysql stop

            -
                uses: harmon758/postgresql-action@v1
                with:
                    postgresql version: "${{ matrix.postgres }}"
                    postgresql password: "postgres"

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    ini-values: date.timezone=Europe/Paris, opcache.enable=1, opcache.enable_cli=1, opcache.memory_consumption=256, opcache.max_accelerated_files=32531, opcache.interned_strings_buffer=8, opcache.validate_timestamps=0, opcache.save_comments=1, opcache.fast_shutdown=0
                    extensions: intl, gd, opcache, pgsql, pdo_pgsql, :xdebug
                    tools: symfony
                    coverage: none

            -   name: Configure project
                run: ./configure --env=dev --with-tests --clean-before-tasks

            -
                name: Install certificates
                run: symfony server:ca:install

            -
                name: Configure Behat driver
                run: |
                    sed -i -e 's/javascript_session: chrome/javascript_session: ${{ matrix.behat_driver }}/g' behat.yml.dist

            -
                name: Run Chrome Headless
                run: google-chrome-stable --enable-automation --disable-background-networking --no-default-browser-check --no-first-run --disable-popup-blocking --disable-default-apps --disable-translate --disable-extensions --no-sandbox --enable-features=Metal --headless --remote-debugging-port=9222 --window-size=2880,1800 --proxy-server='direct://' --proxy-bypass-list='*' https://127.0.0.1 > /dev/null 2>&1 &

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-

            -
                name: Install dependencies
                if: steps.composer-cache.outputs.cache-hit != 'true'
                run: composer install --no-interaction

            -
                name: Install behat driver
                if: matrix.behat_driver != 'chrome_headless'
                run: vendor/bin/bdi detect drivers

            -
                name: Run Selenium
                if: matrix.behat_driver == 'chrome'
                run: vendor/bin/selenium-server-standalone -Dwebdriver.chrome.driver=drivers/chromedriver > /dev/null 2>&1 &

            -
                name: Setup Node
                uses: actions/setup-node@v1
                with:
                    node-version: "${{ matrix.node }}"

            -   name: Cache node modules
                id: cache-npm
                uses: actions/cache@v3
                env:
                    cache-name: cache-node-modules
                with:
                    # npm cache files are stored in `~/.npm` on Linux/macOS
                    path: ~/.npm
                    key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                    restore-keys: |
                        ${{ runner.os }}-build-${{ env.cache-name }}-
                        ${{ runner.os }}-build-
                        ${{ runner.os }}-

            -
                name: Install JS dependencies
                run: npm install

            -
                name: Dump the environment
                run: |
                    echo "DATABASE_URL=$DATABASE_URL" >> .env.$APP_ENV
                    composer dump-env $APP_ENV

            -
                name: Warmup cache
                run: bin/console cache:warmup

            -
                name: Run webserver
                run: symfony server:start --port=8080 --dir=public --daemon

            -
                name: Prepare application database
                run: |
                    APP_DEBUG=1 bin/console doctrine:database:create -vvv
                    bin/console doctrine:migrations:migrate -n -vvv

            -
                name: Build assets
                run: |
                    bin/console assets:install public -vvv
                    npm run build

            -
                name: Validate Doctrine mapping
                run: bin/console doctrine:schema:validate -vvv
                if: always() && steps.end-of-setup.outcome == 'success'

            #-
            #    name: Test provided migrations
            #    run: |
            #        bin/console doctrine:migrations:migrate first --no-interaction
            #        bin/console doctrine:migrations:migrate latest --no-interaction

            -
                name: Test installer
                run: bin/console app:install --no-interaction -vvv

            -
                name: Load fixtures
                run: bin/console doctrine:fixtures:load --no-interaction

            -
                name: Run PHPSpec
                run: phpdbg -qrr vendor/bin/phpspec run --no-interaction -f dot

            -
                name: Run PHPUnit
                run: vendor/bin/phpunit

            -
                name: Run CLI Behat
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@cli&&~@todo" || vendor/bin/behat --strict --no-interaction -vvv -f progress --tags="@cli&&~@todo" --rerun

            -
                name: Run non-JS Behat
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="~@javascript&&~@todo&&~@cli" || vendor/bin/behat --strict --no-interaction -vvv -f progress --tags="~@javascript&&~@todo&&~@cli" --rerun

            #-
            #    name: Run JS Behat
            #    run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript&&~@todo&&~@cli" || vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript&&~@todo&&~@cli" --rerun || vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="@javascript&&~@todo&&~@cli" --rerun

            -
                name: Upload Behat logs
                uses: actions/upload-artifact@v2
                if: failure()
                with:
                    name: "Behat logs (PHP ${{ matrix.php }})"
                    path: etc/build/
                    if-no-files-found: ignore

            -
                name: Upload Symfony logs
                uses: actions/upload-artifact@v2
                if: failure()
                with:
                    name: "Symfony logs (PHP ${{ matrix.php }})"
                    path: var/log/
                    if-no-files-found: ignore

    dependabot-major-minor:
        runs-on: ubuntu-latest
        if: ${{ github.actor == 'dependabot[bot]' }}
        needs: [static-checks, test-application]
        steps:
            -   name: Check out code
                uses: actions/checkout@v3

            -   name: Auto-merge major/minor for Dependabot PRs
                run: gh pr merge --auto --merge "$PR_URL"
                if: ${{steps.metadata.outputs.update-type != 'version-update:semver-patch'}}
                env:
                    PR_URL: ${{github.event.pull_request.html_url}}
                    GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    dependabot-patch:
        runs-on: ubuntu-latest
        if: ${{ github.actor == 'dependabot[bot]' }}
        steps:
            -   name: Check out code
                uses: actions/checkout@v3

            -   name: Auto-merge major/minor for Dependabot PRs
                run: gh pr merge --auto --merge "$PR_URL"
                if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}
                env:
                    PR_URL: ${{github.event.pull_request.html_url}}
                    GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
